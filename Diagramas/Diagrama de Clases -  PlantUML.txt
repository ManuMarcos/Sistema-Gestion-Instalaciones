@startuml
class Empresa <<Singleton, Facade>>{
- instalaciones : ArrayList<Instalacion>
- personas : ArrayList<Persona>
- inventario : Inventario
+ agregarProducto(String) 
+ agregarCliente(String)
+ agregarEmpleado(String)
+ agregarCalendario()
}


abstract class Persona{
- id : int
- nombre : String
- direccion : String
# Persona(nombre : String, direccion : String)
}

class Cliente{
- {static} generador : int
- tipoCliente : TipoCliente
- correoElectronico : String
+ Cliente(nombre : String, direccion : String, tipoCliente : TipoCliente, correoElectronico : String)
}

abstract class Empleado{
# {static} generador : int
- sueldo : float
# Empleado(nombre : String, direccion : String)
}



enum TipoCliente{
INDIVIDUO
EMPRESA
}

class Operador{
+ darDeAlta() : void
+ agendarInstalacion(Cliente, Tecnico, Dia, Turno, boolean, boolean) : void 
}

class Tecnico{
- experienciaLaboral : ExperienciaLaboral
- agenda : Agenda
- turnoLaboral : Disponibilidad
- empresa : Empresa
+ Tecnico(nombre : String, direccion : String, experienciaLaboral : ExperienciaLaboral, turnoLaboral : Disponibilidad)
+ getExperienciaLaboral() : ExperienciaLaboral
+ setExperienciaLaboral(ExperienciaLaboral) : void
+ getTurnoLaboral() : Disponibilidad
+ setTurnoLaboral(turnoLaboral : Disponibilidad) : void
+ getAgenda() : Agenda
+ completarInstalacion(Instalacion instalacion, horaInicio : Calendar, horaFinalizacion : Calendar, almuerzo : Boolean) : void
+ agregarElementoUtilizado(instalacion : Instalacion, producto : Producto) : void
+ toString() : String
}

abstract class ExperienciaLaboral{}

class Junior{
- {static} costoHora : float
}

class SemiSenior{
- {static} costoHora : float
}

class Senior{
- {static} costoHora : float
}

class Administrativo{
+ facturarInstalacion()
- emitirFactura()
- enviarFactura()
+ modificarInstalacion(Instalacion)
+ imprimirFactura()
+ obtenerFacturasEmitidas() : ArrayList<Factura>
}

class Factura{
- {static} generador : int
- numero : int 
- {static} iva : int
- precioTotal : float
}


class Administrador{
+ crearTecnico(faltanParametros) : void
+ crearProducto(faltanParametros) : void
+ setCostoHoraTrabajo(Tecnico, float) : void
+ setStockProducto(Producto, int) : void
+ setPrecioProducto(Producto, float) : void
+ setCostoViaje(float) : void
}




class Inventario{
- productos : HashMap<Producto, stock : Integer>
+ Inventario()
+ obtenerStock(Producto) : int
+ setStock(Producto, stock : int) : void
+ setPrecioProducto(Producto, precio : float) : boolean
+ hayStock(Producto) : boolean
+ quitarProducto(Producto) : Producto
- buscarProducto(Producto) : Producto
+ toString() : String
}

abstract class Producto{
# precio : float
# setPrecio(precio : float) : void
# getPrecio() : float
}


class Evaporadora{
}

class Condensadora{
}

class KitDeInstalacion{
}

class Instalacion{
- generador {static} : int
- id : int
- estado : Estado
- horaInicio : Date
- horaFinalizacion : Date
- turno : Turno
- elementos : ArrayList<Producto>
- tecnico : Tecnico
- cliente : Cliente
- factura : Factura
- tiempoTrabajado : Date
- necesitaSeguro : boolean
- necesitaSoportePared : boolean
- almuerzo : boolean
- costoDeViaje : float
}

enum Estado{
PROGRAMADA
EN CURSO
CANCELADA
FINALIZADA
}

class Agenda{
- dias : ArrayList<Dia>
- Disponibilidad : Disponibilidad
+ Agenda(Disponibilidad : Disponibilidad)
+ agendarInstalacion(instalacion : Instalacion, fecha : Calendar)
+ imprimirTurnosPorFecha(fecha : Calendar)
- existeDia(fecha : Calendar) : Dia
- buscarDia(fecha : Calendar) : Dia
- verificarFecha(fecha : Calendar) : boolean
}

class Dia{
- fecha : Calendar
- turnos : ArrayList<Turno>
+ Dia(fecha : Calendar)
+ agregarTurno(turno : Turno, Disponibilidad : Disponibilidad) : boolean
+ imprimirTurnos() : void
+ estaDisponible(fecha : Calendar) : boolean
+ soyLaFecha(fecha : Calendar) : boolean
+ getFecha() : Calendar
+ getTurnos() : ArrayList<Turno>
+ toString() : String
}

class Turno{
- horaInicio : Calendar
- horaFinalizacion : Calendar
- instalacion : Instalacion
+ Turno(horaInicio: Calendar)
- asignarHoraFinalizacion(horaInicio : Calendar) : void
+ toString() : String
+ estoyOcupando(Turno) : boolean
+ getHoraInicio() : Calendar
+ getHoraFinalizacion() : Calendar
+ getInstalacion() : Instalacion
+ setInstalacion(Instalacion instalacion) : void
}

abstract class Disponibilidad{
# {abstract} esHorarioLaboral(turno : Turno) : boolean
# {abstract} getHoraInicio() : Calendar
# {abstract} getHoraFin() : Calendar
# {abstract} esDiaLaboral(fecha : Calendar) : boolean
}

class TurnoManana{
- {static} horaInicio : Calendar
- {static} horafin : Calendar
- {static} diasNoLaborales : int[]
+ TurnoManana()
+ getHoraInicio() : Calendar
+ getHoraFin() : Calendar
+ esDiaLaboral(fecha : Calendar) : boolean
+ esHorarioLaboral(turno : Turno) : boolean
}

class TurnoTarde{
- {static} horaInicio : Calendar
- {static} horafin : Calendar
- {static} diasNoLaborales : int[]
+ TurnoTarde()
+ getHoraInicio() : Calendar
+ getHoraFin() : Calendar
+ esDiaLaboral(fecha : Calendar) : boolean
+ esHorarioLaboral(turno : Turno) : boolean
}

class TurnoCompleto{
- {static} horaInicio : Calendar
- {static} horaFin : Calendar
- {diasNoLaborales} : int[]
+ TurnoCompleto()
+ getHoraInicio() : Calendar
+ getHoraFin() : Calendar
+ esDiaLaboral(fecha : Calendar) : boolean
+ esHorarioLaboral(turno : Turno) : boolean
}



Agenda *-- Dia
Agenda *-- Disponibilidad
Dia *-- Turno

Disponibilidad <|-- TurnoManana
Disponibilidad <|-- TurnoTarde
Disponibilidad <|-- TurnoCompleto

Persona <|-- Cliente
Persona <|-- Empleado
Empleado <|-- Operador
Empleado <|-- Administrativo
Empleado <|-- Administrador
Empleado <|-- Tecnico

ExperienciaLaboral <|-- Junior
ExperienciaLaboral <|-- SemiSenior
ExperienciaLaboral <|-- Senior

Tecnico *-- ExperienciaLaboral
Tecnico *-- Agenda
Instalacion o-- Persona
Instalacion o-- Producto
Instalacion o-- Estado
Instalacion *-- Factura
Instalacion o-- Turno
Inventario *-- Producto
Empresa *-- Instalacion
Empresa *-- Persona
Empresa *-- Inventario
Cliente o-- TipoCliente




Producto <|-- Evaporadora
Producto <|-- Condensadora
Producto <|-- KitDeInstalacion
@enduml