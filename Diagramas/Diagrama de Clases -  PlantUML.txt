@startuml
class Empresa <<Singleton, Facade>>{
- instalaciones : ArrayList<Instalacion>
- empleados : ArrayList<Empleado>
- clientes : ArrayList<Cliente>
- inventario : Inventario
- facturas : ArrayList<Factura>
- Empresa()
+crearCliente(String,String,long,TipoCliente,String)  : boolean
+crearEmpleado(String, String, String, String, String) : boolean
+existeCliente(long) : boolean
+buscarClienteToView(long) : ClienteView
-buscarCliente(long) : Cliente
-buscarEmpleado(int) : Empleado
-esPosibleAgendarInstalacion(Cliente, Tecnico, Calendar, boolean, boolean) : boolean
+agendarInstalacion(long, int, Calendar, boolean, boolean) : boolean
-buscarInstalacion(int) : Instalacion
+existeInstalacion(int) : boolean
+setStockProducto(String, int) : boolean
+setPrecioProducto(String, float) : boolean
+setCostoSeguro(float) : void
+setCostoViaje(float) : void
+getCostoSeguro() : float
+getCostoVIaje() : float
+buscarNombreClienteLike(String) : ArrayList<ClienteView>
+esUsuarioValido(String, String, String) : int
+getTipoDeUsuario() : ArrayList<String>
+getInstalacionesAsignadas(int) : ArrayList<InstalacionView>
+getFacturasView() : ArrayList<FacturaView>
+getFacturaView(int) : FacturaView
+completarInstalacion(int, LocalTime, LocalTime, boolean, int, int, int, float) : boolean
+getClientesView() : ArrayList<ClienteView>
+getTecnicosView() : ArrayList<TecnicoView>
+getClienteView(long) : ClienteView
+formatearFecha(Calendar) : String
+getEmpleadoView(int) : EmpleadoView
+getTecnicosDisponibles(Calendar) : ArrayList<EmpleadoView>
-getTecnicos() : ArrayList<Tecnico>
+getInstalacionView(int) : InstalacionView
+estaDisponibleCliente(Calendar, long) : boolean
+hayStockDisponibleParaAgendar(boolean) : boolean
+getProductosView() : ArrayList<ProductoInventarioView>
+getTecnicoView(int) : TecnicoView
+getProductoView(ing) : ProductoInventarioView
+actualizarDatosProducto(String, float, int) : void
-crearProducto(String) : Producto
-crearTurnoLaboral(String) : Disponibilidad
-crearExpLaboral(String) : ExperienciaLaboral
+setCostoHoras(String, float) : boolean
+getCostoHoras(String) : float
+crearTecnico(String, String, String, String, String, String) : TecnicoView
+modificarTecnico(int, String, String, String, String, String, String) : void
+eliminarEmpleado(int) : boolean
}


abstract class Persona{
- nombre : String
- direccion : String
# Persona(nombre : String, direccion : String)
+getNombre() : String
+getDireccion() : String
+setNombre(String) : void
+setDireccion(String) : void
}

class Cliente{
-cuitCuil : long
-agenda : Agenda
- tipoCliente : TipoCliente
- correoElectronico : String
+ Cliente(nombre : String, direccion : String, tipoCliente : TipoCliente, correoElectronico : String)
- tengoElCuitCuil(Long) : boolean
+getAgenda() : Agenda
+getCuitCuil() : long
+getCorreoElectronico() : String
+getTipoCliente() : TipoCliente
}

abstract class Empleado{
# {static} generador : int
# id:int
# sueldo : float
# usuario : String
# contraseña : String
# Empleado(nombre : String, direccion : String)
+getUsuario() : String
+getContraseña() String
+getId() : int
+setUsuario(String): void
+setContraseña(String): void
#ToView() : EmpleadoView
}



enum TipoCliente{
INDIVIDUO
EMPRESA
}

class Administrador{
+Administrador(String,String,String,String)
}

class Operador{
+Operador(String,String,String,String)
}

class Administrativo{
+ Administrativo(String, String, Disponibilidad, String, String, ExperienciaLaboral)
}

class Tecnico{
- experienciaLaboral : ExperienciaLaboral
- agenda : Agenda
+ Tecnico(String, String, ExperienciaLaboral, Disponibilidad)
+ getExperienciaLaboral() : ExperienciaLaboral
+ setExperienciaLaboral(ExperienciaLaboral) : void
+ getTurnoLaboral() : Disponibilidad
+ setTurnoLaboral(Disponibilidad) : void
+ getAgenda() : Agenda
+ toView() : TecnicoView
+ toString() : String

}

abstract class ExperienciaLaboral{}

class Junior{
- {static} costoHora : float
+ Junior()
+ setCostoHora(float) : void
+ getCostoHora(): : float

}

class SemiSenior{
- {static} costoHora : float
+ SemiSenior()
+ setCostoHora(float) : void
+ getCostoHora() : float
}

class Senior{
- {static} costoHora : float
+ Senior()
+ setCostoHora(float)  : void
+ getCostoHora() : float
}

class Factura{
- {static} generador : int
- {static} iva : double
- numero : int
- tipo : char
- fecha : Date
- importeNeto : float
- precioTotal : float
- importeIva : float
- cliente : Cliente
- renglones : ArrayList<FacturaRenglon>
+ Factura(Cliente)
+getNumero() : int
+agregarRenglon(String, int, float) : void
+setTipoFactura(TipoCliente) : void
+getPrecioTotal() : float
+getRenglones() : ArrayList<FacturaRenglon>
+toView() : FacturaView
}

class FacturaRenglon{
- descripcion : String
- cantidad : int
- precioUnitario : float
- importe : float
+ FacturaRenglon(String, int, float)
+ getImporte() : float
+ getCantidad() : int
+ getPrecioUnitario() : float
+ getDescripcion() : Sting
+ toString() : String
}





class Inventario{
- productos : HashMap<Producto, stock : Integer>
+ Inventario()
+ getStock(Producto) : int
+ setStock(Producto, stock : int) : void
+ setPrecioProducto(Producto, precio : float) : boolean
+agregarProducto(Producto) : void
+ hayStock(Producto) : boolean
+ quitarProducto(Producto) : Producto
- buscarProducto(Producto) : Producto
+getProductos() : ArrayList<ProductoInventarioView>
+getProductoView(int) : ProductoInventarioView
+ toString() : String
}

abstract class Producto{
- precio : float
# generador : int
# id : int
+ Producto(float)
+ setPrecio(precio : float) : void
+ getPrecio() : float
# getId() : int
}


class Evaporadora{
}

class SoportePared{
+ SoportePared()
+ SoportePared(float)
+ toString(String)
}


class Condensadora{
}

class KitDeInstalacion{
+ kitDeInstalacion()
+ kitDeInstalacion(float)
+ toString() : String
}

class Instalacion{
- generador {static} : int
- id : int
- estado : Estado
- horaInicio : Calendar
- horaFinalizacion : Calendar
- elementos : ArrayList<Producto>
- tecnico : Tecnico
- cliente : Cliente
- factura : Factura
- {static} costoViaje : float
- {static} costoSeguro : float
- otrosGastos : float
- minsTrabajados : int
- necesitaSeguro : boolean
- almuerzo : boolean
+Instalacion(Cliente,Tecnico,boolean)
+getId() : int
+getEstado() : Estado
+setEstado(Estado) : void
+setCostoSeguro(float) : void
+setCostoViaje(float) : void
+getCostoSeguro() : float
+getCostoVIaje() : float
+getHoraInicio() : Calendar
+setHoraInicio(Calendar) : void
-setHoraInicio(LocalTime) : void
-setHoraFinalizacion(LocalTime) : void
-calcularPrecioElementos() : float
+getPrecioProvisorio() : float
+finalizar(LocalTime, LocalTime, ArrayList<Producto>, float, boolean)
+getHoraFinalizacion() : Calendar
+setHoraFinalizacion(Calendar) : void
+getCantElementos(Producto) : int
-getTipoElementosUtilizados() : ArrayList<Producto>
-facturar() : Factura
+agregarElemento(Producto) : void
+getTecnico() : Tecnico
+setTecnico(Tecnico) : void
+getCliente() : Cliente
+setCliente(Cliente) : void
+getFactura() : Factura
+setFactura(Factura) : void
+getMinsTrabajados() : int
-setMinsTrabajados(long) : void
+getNecesitaSeguro() : boolean
+setNecesitaSeguro(boolean) : void
+almorzoElTecnico() : boolean
+setAlmuerzo(boolean) : void
+toView() : InstalacionView
}

enum Estado{
PROGRAMADA
EN CURSO
CANCELADA
FINALIZADA
}

class Agenda{
- dias : ArrayList<Dia>
- Disponibilidad : Disponibilidad
+ Agenda(Disponibilidad : Disponibilidad)
+setDisponibilidad(Disponibilidad):void
+getDisponibilidad():Disponibilidad
+agendarTurno(Turno):boolean
+estaDisponible(Turno):boolean
-esValido(Turno):boolean
-tieneFechaPosteriorAHoy(Turno) :boolean
+imprimirTurnosPorFecha(Calendar):void
+getTurnosAgendados() : ArrayList<Turno>
-getDia(Calendar):Dia
-buscarDia(Calendar):Dia
-existeDia(Calendar):boolean
+imprimirTurnos():void
+ordenarDias():void
+getDias() : ArrayList<Dia>
}

class Dia{
- fecha : Calendar
- turnos : ArrayList<Turno>
+ Dia(fecha : Calendar)
+ agregarTurno(turno : Turno, Disponibilidad : Disponibilidad) : boolean
+ imprimirTurnos() : void
+ estaDisponible(fecha : Calendar) : boolean
+ soyLaFecha(fecha : Calendar) : boolean
+ getFecha() : Calendar
+ getTurnos() : ArrayList<Turno>
+ toString() : String
+ordenarTurnos(): void
}

class Turno{
- horaInicio : Calendar
- horaFinalizacion : Calendar
- instalacion : Instalacion
+ Turno(horaInicio: Calendar)
- asignarHoraFinalizacion(horaInicio : Calendar) : void
+ toString() : String
+ estoyOcupando(Turno) : boolean
+ getHoraInicio() : Calendar
+ getHoraFinalizacion() : Calendar
+ getInstalacion() : Instalacion
+ setInstalacion(Instalacion instalacion) : void
}

abstract class Disponibilidad{
# {abstract} esHorarioLaboral(turno : Turno) : boolean
# {abstract} getHoraInicio() : Calendar
# {abstract} getHoraFin() : Calendar
# {abstract} esDiaLaboral(fecha : Calendar) : boolean
}

class TurnoManana{
- {static} horaInicio : Calendar
- {static} horafin : Calendar
- {static} diasNoLaborales : int[]
+ TurnoManana()
+ getHoraInicio() : Calendar
+ getHoraFin() : Calendar
+ esDiaLaboral(fecha : Calendar) : boolean
+ esHorarioLaboral(turno : Turno) : boolean
}

class TurnoTarde{
- {static} horaInicio : Calendar
- {static} horafin : Calendar
- {static} diasNoLaborales : int[]
+ TurnoTarde()
+ getHoraInicio() : Calendar
+ getHoraFin() : Calendar
+ esDiaLaboral(fecha : Calendar) : boolean
+ esHorarioLaboral(turno : Turno) : boolean
}

class TurnoCompleto{
- {static} horaInicio : Calendar
- {static} horaFin : Calendar
- {diasNoLaborales} : int[]
+ TurnoCompleto()
+ getHoraInicio() : Calendar
+ getHoraFin() : Calendar
+ esDiaLaboral(fecha : Calendar) : boolean
+ esHorarioLaboral(turno : Turno) : boolean
}



Agenda *-- Dia
Agenda *-- Disponibilidad
Dia *-- Turno

Disponibilidad <|-- TurnoManana
Disponibilidad <|-- TurnoTarde
Disponibilidad <|-- TurnoCompleto

Persona <|-- Cliente
Persona <|-- Empleado
Empleado <|-- Operador
Empleado <|-- Administrativo
Empleado <|-- Administrador
Empleado <|-- Tecnico

ExperienciaLaboral <|-- Junior
ExperienciaLaboral <|-- SemiSenior
ExperienciaLaboral <|-- Senior

Tecnico *-- ExperienciaLaboral
Tecnico *-- Agenda
Instalacion o-- Persona
Instalacion o-- Producto
Instalacion o-- Estado
Instalacion *-- Factura
Instalacion --o Turno
Inventario *-- Producto
Empresa *-- Instalacion
Empresa *-- Persona
Empresa *-- Inventario
Factura *-- FacturaRenglon
Cliente o-- TipoCliente



Producto <|-- SoportePared
Producto <|-- Evaporadora
Producto <|-- Condensadora
Producto <|-- KitDeInstalacion
@enduml